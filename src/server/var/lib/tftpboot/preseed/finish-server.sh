#!/bin/bash

# Leave a breadcrumb indicating we are working
echo `date` > /root/finish-server.txt
echo "Finish Server script starting..." >> /root/finish-server.txt

# We have a few extra packages to get including one whole repository to set up
# A squid that can do HTTPS proxy
echo "Adding repository with web cache that can handle https..." >> /root/finish-server.txt
if [ ! -e /etc/apt/sources.list.d/ubuntu16.diladele.com.list ]; then
  wget -qO - http://packages.diladele.com/diladele_pub.asc | apt-key add -
  echo "deb http://ubuntu16.diladele.com/ubuntu/ xenial main" > /etc/apt/sources.list.d/ubuntu16.diladele.com.list
  apt-get update
fi

apt-get -y install libecap3 squid-common squid squidclient shorewall openvpn openssh-server ntpdate ntp ntpdate 

# Make sure we have an ssh key generated
echo "Generating SSH key..." >> /root/finish-server.txt
if [ ! -e /root/.ssh/id_ed25519.pub ]; then
  mkdir /root/.ssh
  chmod 700 /root/.ssh
  ssh-keygen -o -a 100 -t ed25519 -f /root/.ssh/id_ed25519 -P ''
fi

# Set our hostname in a way that dnsmasq will resolve it, using 'server' so epoptes is zeroconf
# Remember that 'epoptes-client -c' will need to execute on all clients followed by a reboot beefore they connect
if [ `cat /etc/hosts | grep server | wc -l` != "0" ]; then
  echo "" >> /etc/hosts
  echo "# The following lines are autogenerated during installation, do not alter them" >> /etc/hosts
  for LINE in `ifconfig -a | grep 'inet addr' | cut -d':' -f2 | cut -d' ' -f1 | grep -v 127.0.0.1`; do echo $LINE server >> /etc/hosts; echo "added entry $LINE server to /etc/hosts file" >> /root/finish-server.txt; done
  echo "# End of installation generated section" >> /etc/hosts
fi

# Make sure epopsel is ready to go
echo "Generating epopsel config..." >> /root/finish-server.txt
gpasswd -a consolacion epoptes

# Set up VPN software, and configure it to talk to our mothership (mikehardy.net at the moment)
curl -s -o /root/openvpn-config.tar.gz tftp://10.42.0.254/dist/fresh-install-openvpn.tar.gz
cd /etc/openvpn
tar -zxf /root/openvpn-config.tar.gz
rm ./fresh-install/fresh-install.conf
ln -s ./fresh-install/fresh-install.conf .
systemctl restart openvpn@fresh-install.service
systemctl enable openvpn@fresh-install.service

# Fixing KTouch "no lessons available" issue with our combo of language and keyboard layout
# On the KDE KTouch forum there is a post 'KTouch is empty - keyboard layout issue?' that has info
# Need to create new lessons for our combo from whatever ones look good for our keyboard layout

# This is for squid stuff maybe later...
# May need to do the following if there is repository clash and the non-HTTPS version comes in from upstream:
#apt-mark hold squid squid-common squidclient libecap3

# The foreman repository
echo "Adding repository for foreman/puppet/salt for automated configuration management..." >> /root/finish-server.txt

# Now we want to create our own root certificate authority
echo "Creating a default root certificate authority we can distribute to clients..." >> /root/finish-server.txt
#https://wiki.squid-cache.org/Features/DynamicSslCert
#https://letsencrypt.org/2015/11/09/why-90-days.html

# Set up squid
echo "Setting up web cache to handle http and https..." >> /root/finish-server.txt
# create squid storage for mimicked ssl certificates
SSL_DB=/var/spool/squid_ssldb
/usr/lib/squid/ssl_crtd -c -s $SSL_DB
chown -R proxy:proxy $SSL_DB
systemctl stop squid
mv /etc/squid/squid.conf /etc/squid/squid.conf.default
curl -s -o /root/squid-conf.tar.gz tftp://10.42.0.254/dist/squid-conf.tar.gz
cd /etc/squid
tar -zxf /root/squid-conf.tar.gz
mv conf/squid.conf /etc/squid/squid.conf
squid -z
systemctl start squid
echo 'Acquire::http::Proxy "http://localhost:3128";' > /etc/apt/apt.conf.d/00proxy
# Note that you really need to distribute myca.der / myca.pem at this point, to clients...

# Set up shorewall and get it to do redirects to squid
echo "Setting up shorewall firewall with redirection to web cache..." >> /root/finish-server.txt
curl -s -o /root/shorewall-conf.tar.gz tftp://10.42.0.254/dist/shorewall-conf.tar.gz
cd /etc
tar -zxf /root/shorewall-conf.tar.gz
systemctl enable shorewall
systemctl restart shorewall

# Set up foreman, ready for baremetal provisioning on this subnet using DHCP/TFTP/DNS/PXElinux/Salt
echo "Setting up automated configuration management system..." >> /root/finish-server.txt


echo "Finish Server script done." >> /root/finish-server.txt
echo `date` >> /root/finish-server.txt
